COL_BRIGHT="\033[1m"
COL_RED="\033[31m"
COL_NORMAL="\033[0m"

ANS_YES="yes"
ANS_NO="no"
ANS_SKIP="skip"

export PROJECT_PATH=`pwd | sed 's!\(.*\)\/env/scripts.*!\1!g'`
export ENV_PATH=$PROJECT_PATH/env
export UNIT_TEST_PATH=$PROJECT_PATH/ut
export SCRIPTS_PATH=$ENV_PATH/scripts
export BINARIES_PATH=$ENV_PATH/binaries
export BINARIES_BCK_PATH=$BINARIES_PATH/bck
export GIT_EMAIL_USER=`git config -l | grep user.email | awk -F= '{ print $2 }' | sed 's/\(.*\)@.*$/\1/g'`
export TOOLCHAIN_PATH="/usr/local/sandisk/toolchain"
export EXECUTABLE_PATH=/usr/local/bin

PRINT()
{
  printf $COL_BRIGHT"$*"$COL_NORMAL
}

PRINTLN()
{
  PRINT "$*\n"
}

print_key_val()
{
  printf $COL_RED"$1"$COL_BRIGHT"="$COL_NORMAL"$2\n"
}

do_quite_cd()
{
  cd 1>/dev/null $*
}

do_quite_tar()
{
  tar 2>/dev/null $*
}

do_quite_tar_extract_with_bar()
{
  # tarball is the last in the parameter list
  tarball=${!#}

  # remove the last parameter from the parameter list, the rest are flags
  set -- "${@:1:$(($#-1))}"

  # extract with progress bar
  pv $tarball | tar 2>/dev/null $* -
}

# extract a full path's prefix.
# example:
# $ do_extract_path_prefix /home/ilan/some_file.txt
# $ /home/ilan
do_extract_path_prefix()
{
  echo $1 | sed 's!\(.*\)\/\([^\/].*\)$!\1!g'
}

# extract a full path's suffix
# example:
# $ do_extract_path_suffix /home/ilan/some_file.txt
# $ some_file.txt
do_extract_path_suffix()
{
  echo $1 | sed 's!.*\/\([^\/].*\)$!\1!g'
}

get_root_password()
{
  if [ -n "$PASSWORD" ]; then
    return
  fi

  read -sp "please enter $USER's sudo password: " PASSWORD
  echo
  sudo -k
  echo $PASSWORD | sudo 2>/dev/null -p "" -S su
  if [ $? != 0 ]; then
    echo "wrong sudo password :("
    exit 1
  fi

  export PASSWORD=$PASSWORD
}

get_gerrit_credentials()
{
  if [ -n "$GERRIT_PASSWORD" ]; then
    return
  fi

  # try to read Gerrit user name from ~/.ssh/config
  if [ -e ~/.ssh/config ]; then
    GERRIT_USERNAME=`cat ~/.ssh/config | grep USER | sed 's/.*USER\(.*\)/\1/g' | tr -d ' '`
  fi

  # if necessary, get gerrit user name from command line
  while [ -z "$GERRIT_USERNAME" ]; do
    read -p "please enter your Gerrit username: " GERRIT_USERNAME
  done

  # get gerrit password
  while [ -z "$GERRIT_PASSWORD" ]; do
    read -sp "please enter Gerrit password for user '$GERRIT_USERNAME': " GERRIT_PASSWORD
    echo
  done

  # test gerrit credentials
  rm -f .auth-test
  wget --quiet --user=$GERRIT_USERNAME --password=$GERRIT_PASSWORD http://sec-mobilehost/.auth-test
  if [ -f .auth-test ]; then
    rm -f .auth-test
  else
    echo "wrong Gerrit password :("
    exit 2
  fi

  export GERRIT_USERNAME=$GERRIT_USERNAME
  export GERRIT_PASSWORD=$GERRIT_PASSWORD
}

# wget a file if it does not already exist
# usage:
#   do_wget <is_secure> <remote_file> <destination> [message]
do_wget()
{
  IS_SECURE=$1
  REMOTE_FILE=$2
  DESTINATION=$3
  MESSAGE=$4

  CUR_DIR=`pwd`
  REMOTE_FILE_NAME=`do_extract_path_suffix $REMOTE_FILE`

  if [ ! -f $DESTINATION/$REMOTE_FILE_NAME ]; then
    if [ -n "$MESSAGE" ]; then
      PRINTLN "$MESSAGE"
    fi

    [ $IS_SECURE -eq 1 ] && get_gerrit_credentials

    mkdir -p $DESTINATION

    do_quite_cd $DESTINATION
    wget --user=$GERRIT_USERNAME --password=$GERRIT_PASSWORD $REMOTE_FILE
    do_quite_cd $CUR_DIR

    if [ ! -f $DESTINATION/$REMOTE_FILE_NAME ]; then
      return 1
    fi
  fi

  return 0
}

# backup some sub-directories
# usage:
#   do_backup_subdirs <extraction_dir> <remote_file_name> <subdirs...>
do_backup_subdirs()
{
  EXTRACTION_DIR=$1
  shift
  REMOTE_FILE_NAME=$1
  shift
  SUBDIRS=$*

  DATE=`date +%G_%m_%d-%H_%M_%S`
  BCK_FILE_NAME=`echo $REMOTE_FILE_NAME | sed 's!\(.*\)\.\<tar\>\(.*\)!\1-'$GIT_EMAIL_USER'-'$DATE'.tar\2!g'`
  TAR_FLAGS="cf"

  if [ -n "`echo $BCK_FILE_NAME | grep "bz2$"`" ]; then
    TAR_FLAGS+=j
  fi
  if [ -n "`echo $BCK_FILE_NAME | grep "gz$"`" ]; then
    TAR_FLAGS+=z
  fi

  PRINT "Backing up current $SUBDIRS at: "
  printf "%s\n" "$BINARIES_BCK_PATH/$BCK_FILE_NAME"

  if [ ! -d $BINARIES_BCK_PATH ]; then
    mkdir -p 2>&1 $BINARIES_BCK_PATH
  fi

  do_quite_tar $TAR_FLAGS $BINARIES_BCK_PATH/$BCK_FILE_NAME $SUBDIRS
}

# detect if sub-directories exist.
# usage:
#   detect_subdirs_exists <target_extraction_dir> <remote_file_name> <subdirs>
detect_subdirs_exists()
{
  CUR_DIR=`pwd`
  EXTRACTION_DIR=$1
  shift
  REMOTE_FILE_NAME=$1
  shift

  SUBDIRS=""
  IS_FIRST=1

  # test if any sub-directories are to be over written due to tarball extraction
  do_quite_cd $EXTRACTION_DIR
  for dir in $*
  do
    if [ -d $dir ]; then
      if [ $IS_FIRST -eq 1 ]; then
        IS_FIRST=0
      else
        SUBDIRS+=" "
      fi

      SUBDIRS+="$dir"
    fi
  done
  do_quite_cd $CUR_DIR

  if [ -n "$SUBDIRS" ]; then
    PRINTLN "The following sub-directories are going to be over written:"
    printf "in $EXTRACTION_DIR\n"
    for dir in $SUBDIRS
    do
      printf "   - $dir\n"
    done

    IS_FIRST=1
    while [ "$IS_DO_BACKUP" != "$ANS_YES" -a "$IS_DO_BACKUP" != "$ANS_NO" -a "$IS_DO_BACKUP" != "$ANS_SKIP" ]
    do
      PRINT "Do you want to backup? "
      if [ $IS_FIRST -eq 1 ]; then
        printf "\n"
        printf "$ANS_YES  - replace after backing up previous copy in $BINARIES_PATH\n"
        printf "$ANS_NO   - replace without backing up previous copy\n"
        printf "$ANS_SKIP - skip this part all together\n"
        PRINT "So what will it be? "
        IS_FIRST=0
      fi

      read -p "[$ANS_YES/$ANS_NO/$ANS_SKIP]: " IS_DO_BACKUP
    done
  else
    # nothing due to be over written - nothing to backup
    return 0
  fi

  # test user's answer: skip or not
  if [ "$IS_DO_BACKUP" == $ANS_SKIP ]; then
    return 1
  fi

  # user requested to backup sub directories that are going to be over written
  if [ "$IS_DO_BACKUP" == $ANS_YES ]; then
    do_backup_subdirs $EXTRACTION_DIR $REMOTE_FILE_NAME $SUBDIRS
  fi

  echo $PASSWORD | sudo -p "" -S rm -rf $SUBDIRS
  if [ $? != 0 ]; then
    PRINTLN "Error deleting old: $SUBDIRS"
    exit 1
  fi

  return 0
}

build_directory_structure()
{
  # attempt to create directory as $USER
  RETURN_VALUE=`mkdir 2>&1 -p $1`

  if [ -n "`echo \"$RETURN_VALUE\" | grep \"Permission denied\"`" ]; then
    echo $PASSWORD | sudo -p "" -S mkdir 2>/dev/null -p $1
  fi

  if [ $? != 0 ]; then
    PRINTLN "Error creating directory: $1"
    exit 1
  fi
}

test_is_sudo_required()
{
  PATH_USER=`ls -la $1 | grep " \.$" | awk '{ print $3 }'`
  if [ "$PATH_USER" == "root" ]; then
    return 1
  else
    return 0
  fi
}

# extarct a tarball to a new location
# usage:
#   extract_tarball <target_extraction_dir> <tarball>
extract_tarball()
{
  CUR_DIR=`pwd`
  TARGET_EXTRACTION_DIR=$1
  TARBALL=$2

  TAR_FLAGS="xf"
  if [ -n "`echo $BINARIES_PATH/$TARBALL | grep "bz2$"`" ]; then
    TAR_FLAGS+=j
  fi
  if [ -n "`echo $BINARIES_PATH/$TARBALL | grep "gz$"`" ]; then
    TAR_FLAGS+=z
  fi

  do_quite_cd $TARGET_EXTRACTION_DIR
  if [ $? != 0 ]; then
    PRINTLN "Error: no permission to enter $TARGET_EXTRACTION_DIR"
    exit 1
  fi

  PRINTLN "Extracting $TARBALL... "

  test_is_sudo_required $TARGET_EXTRACTION_DIR
  if [ $? == 0 ]; then
    # extract as $USER
    ln -sf $BINARIES_PATH/$TARBALL ./.$TARBALL.tmp
    if [ -n "`which pv`" ]; then
      do_quite_tar_extract_with_bar $TAR_FLAGS ./.$TARBALL.tmp
    else
      do_quite_tar $TAR_FLAGS ./.$TARBALL.tmp
    fi
    rm -f ./.$TARBALL.tmp
  else
    # extract as root
    echo $PASSWORD | sudo -p "" -S cp 2>/dev/null $BINARIES_PATH/$TARBALL .
    echo $PASSWORD | sudo -p "" -S tar 2>/dev/null $TAR_FLAGS $TARBALL
    echo $PASSWORD | sudo -p "" -S rm 2>/dev/null -f $TARBALL
  fi

  do_quite_cd $CUR_DIR
}

get_tarball_subdirs()
{
   SUBDIRS=""
   IS_FIRST=1
   LIST="`tar 2>/dev/null -tf $1 | sed 's!^\([^\/]*\)\/.*!\1!g'`"

   for item in $LIST
   do
     IS_DUPLICATE=0

     for dir in $SUBDIRS
     do
       if [ "$dir" == "$item" ]; then
         IS_DUPLICATE=1
         break
       fi
     done

     if [ $IS_DUPLICATE -eq 1 ]; then
       continue
     fi

     if [ $IS_FIRST -eq 1 ]; then
       IS_FIRST=0
     else
       SUBDIRS+=" "
     fi

     SUBDIRS+=" $item"
   done

   echo $SUBDIRS
}

# retrieve and setup a tarball
# usage:
#   setup_new_tar_generic <is_secure> <target_extraction_dir> <remote_file> [skip_detect_subdirs]
setup_new_tar_generic()
{
  # test for correct number of arguments
  if [ $# != 3 -a $# != 4 ]; then
    PRINTLN "Usage error: `do_extract_path_suffix $0` <target_extraction_dir> <remote_file>"
    exit 1
  fi

  CUR_DIR=`pwd`
  IS_SECURE=$1
  TARGET_EXTRACTION_DIR=$2
  REMOTE_FILE=$3
  SKIP_DETECTION=$4 # optional

  # get the root password for possible later need
  get_root_password

  if [ ! -d $BINARIES_PATH ]; then
    mkdir -p 2>&1 $BINARIES_PATH
  fi

  # get remote file (if not there already) and place it in binaries direcotry
  do_wget $IS_SECURE $REMOTE_FILE $BINARIES_PATH
  if [ $? != 0 ]; then
    PRINTLN "Could not get file: $REMOTE_FILE"
    exit 1
  fi

  # make sure target extraction directory exists
  build_directory_structure $TARGET_EXTRACTION_DIR

  # list the new sub-directories due to be extracted
  REMOTE_FILE_NAME=`do_extract_path_suffix $REMOTE_FILE`

  if [ -z "$SKIP_DETECTION" ]; then
    SUBDIRS="`get_tarball_subdirs $BINARIES_PATH/$REMOTE_FILE_NAME`"

    # test if any of these sub-directories exist
    detect_subdirs_exists $TARGET_EXTRACTION_DIR $REMOTE_FILE_NAME $SUBDIRS
    if [ $? != 0 ]; then
      return 1
    fi
  fi

  # extract the tarball into the target extraction directory
  extract_tarball $TARGET_EXTRACTION_DIR $REMOTE_FILE_NAME

  return 0
}

# setup_new_tar <target_extraction_dir> <remote_file> [skip_detect_subdirs]
setup_new_tar()
{
  setup_new_tar_generic 0 $*
  return $?
}

# setup_new_tar_sec <target_extraction_dir> <remote_file> [skip_detect_subdirs]
setup_new_tar_sec()
{
  setup_new_tar_generic 1 $*
  return $?
}

setup_executable()
{
  setup_new_tar $EXECUTABLE_PATH $2
  sudo chmod a+x $EXECUTABLE_PATH/$1
}

